[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Expense",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Expense",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Expense",
        "importPath": "student.models",
        "description": "student.models",
        "isExtraImport": true,
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "RegistrationViewSet",
        "importPath": "student.views",
        "description": "student.views",
        "isExtraImport": true,
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "student.views",
        "description": "student.views",
        "isExtraImport": true,
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "GroupViewSet",
        "importPath": "student.views",
        "description": "student.views",
        "isExtraImport": true,
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "ExpenseViewSet",
        "importPath": "student.views",
        "description": "student.views",
        "isExtraImport": true,
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "UserExpensesView",
        "importPath": "student.views",
        "description": "student.views",
        "isExtraImport": true,
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "RegistrationSerializer",
        "importPath": "student.serializers",
        "description": "student.serializers",
        "isExtraImport": true,
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "importPath": "student.serializers",
        "description": "student.serializers",
        "isExtraImport": true,
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "importPath": "student.serializers",
        "description": "student.serializers",
        "isExtraImport": true,
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "ExpenseSerializer",
        "importPath": "student.serializers",
        "description": "student.serializers",
        "isExtraImport": true,
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "ExpenseWithShareSerializer",
        "importPath": "student.serializers",
        "description": "student.serializers",
        "isExtraImport": true,
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "pocketSense.asgi",
        "description": "pocketSense.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "pocketSense.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-dt6kxzbtsg5-u=ncvhfr5mat&ct^7ltk0=oauq@70@zcs&%@v+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-dt6kxzbtsg5-u=ncvhfr5mat&ct^7ltk0=oauq@70@zcs&%@v+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'rest_framework_simplejwt',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'pocketSense.urls'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "ROOT_URLCONF = 'pocketSense.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "WSGI_APPLICATION = 'pocketSense.wsgi.application'\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "pocketSense.settings",
        "description": "pocketSense.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pocketSense.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "pocketSense.urls",
        "description": "pocketSense.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('student.urls'))\n]",
        "detail": "pocketSense.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "pocketSense.wsgi",
        "description": "pocketSense.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "pocketSense.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "student.migrations.0001_initial",
        "description": "student.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Group',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "student.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StudentConfig",
        "kind": 6,
        "importPath": "student.apps",
        "description": "student.apps",
        "peekOfCode": "class StudentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'student'",
        "detail": "student.apps",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "student.models",
        "description": "student.models",
        "peekOfCode": "class Group(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    members = models.ManyToManyField(User, related_name='custom_groups')\n    def __str__(self):\n        return self.name\nclass Expense(models.Model):\n    group = models.ForeignKey(\n        Group, on_delete=models.CASCADE, related_name='expenses')",
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "Expense",
        "kind": 6,
        "importPath": "student.models",
        "description": "student.models",
        "peekOfCode": "class Expense(models.Model):\n    group = models.ForeignKey(\n        Group, on_delete=models.CASCADE, related_name='expenses')\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    paid_by = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='expenses_paid')\n    created_at = models.DateTimeField(auto_now_add=True)\n    split_among = models.ManyToManyField(User, related_name='expenses_shared')\n    def __str__(self):",
        "detail": "student.models",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "student.serializers",
        "description": "student.serializers",
        "peekOfCode": "class GroupSerializer(serializers.ModelSerializer):\n    members = serializers.SlugRelatedField(\n        many=True,\n        slug_field='username',\n        queryset=User.objects.all()\n    )\n    class Meta:\n        model = Group\n        fields = ['id', 'name', 'description', 'members', 'created_at']\nclass ExpenseSerializer(serializers.ModelSerializer):",
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "ExpenseSerializer",
        "kind": 6,
        "importPath": "student.serializers",
        "description": "student.serializers",
        "peekOfCode": "class ExpenseSerializer(serializers.ModelSerializer):\n    group = serializers.SlugRelatedField(\n        slug_field='name',  # This makes it accept and return the group name\n        queryset=Group.objects.all()\n    )\n    paid_by = serializers.SlugRelatedField(\n        slug_field='username',  # You can use 'email' instead of 'username'\n        queryset=User.objects.all()\n    )\n    split_among = serializers.SlugRelatedField(",
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "ExpenseWithShareSerializer",
        "kind": 6,
        "importPath": "student.serializers",
        "description": "student.serializers",
        "peekOfCode": "class ExpenseWithShareSerializer(serializers.ModelSerializer):\n    group = serializers.SlugRelatedField(\n        slug_field='name', queryset=Group.objects.all())\n    paid_by = serializers.SlugRelatedField(\n        slug_field='username', queryset=User.objects.all())\n    split_among = serializers.SlugRelatedField(\n        slug_field='username', queryset=User.objects.all(), many=True)\n    user_share = serializers.SerializerMethodField()\n    class Meta:\n        model = Expense",
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "RegistrationSerializer",
        "kind": 6,
        "importPath": "student.serializers",
        "description": "student.serializers",
        "peekOfCode": "class RegistrationSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(write_only=True)\n    password1 = serializers.CharField(write_only=True)\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name',\n                  'email', 'password', 'password1']\n    def validate(self, data):\n        # Check if the passwords match",
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "student.serializers",
        "description": "student.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField(write_only=True)\n    def validate(self, attrs):\n        email = attrs.get('email')\n        password = attrs.get('password')\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            raise serializers.ValidationError(",
        "detail": "student.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "student.urls",
        "description": "student.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register('register', RegistrationViewSet, basename='register')\nrouter.register('groups', GroupViewSet, basename='group')\nrouter.register('expenses', ExpenseViewSet, basename='expense')\n# router.register('user-expenses/', UserExpensesView, basename='user-expenses')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('login/', LoginView.as_view(), name='login'),\n    path('refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('user-expenses/', UserExpensesView.as_view(), name='user_expenses'),",
        "detail": "student.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "student.urls",
        "description": "student.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('login/', LoginView.as_view(), name='login'),\n    path('refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('user-expenses/', UserExpensesView.as_view(), name='user_expenses'),\n]",
        "detail": "student.urls",
        "documentation": {}
    },
    {
        "label": "GroupViewSet",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class GroupViewSet(viewsets.ModelViewSet):\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\nclass ExpenseViewSet(viewsets.ModelViewSet):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        expense = serializer.save()",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "ExpenseViewSet",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class ExpenseViewSet(viewsets.ModelViewSet):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        expense = serializer.save()\n        total_members = expense.split_among.count()\n        if total_members > 0:\n            split_amount = expense.amount / total_members",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "UserExpensesView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class UserExpensesView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        # Get all the group IDs the user is part of\n        user_groups_ids = request.user.groups.values_list('id', flat=True)\n        # Debugging: Print out the group IDs to see what groups the user is part of\n        print(f\"User groups: {user_groups_ids}\")\n        if not user_groups_ids:\n            return Response({\"message\": \"User is not part of any groups.\"}, status=status.HTTP_404_NOT_FOUND)\n        # Get expenses for the user's groups",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "RegistrationViewSet",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class RegistrationViewSet(viewsets.ViewSet):\n    def create(self, request):\n        serializer = RegistrationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({\"message\": \"User registered successfully.\"}, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\nclass LoginView(APIView):\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class LoginView(APIView):\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.validated_data['user']\n            user.last_login = timezone.now()\n            user.save()\n            refresh = RefreshToken.for_user(user)\n            access_token = refresh.access_token\n            access_token['email'] = user.email",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pocketSense.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]